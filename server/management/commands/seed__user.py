#TODO –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–∫–∑–∞—á–∏–∫–∏)

from django.core.management.base import BaseCommand
from server.models import Staff, Department
from django.utils import timezone
import random
from faker import Faker

fake = Faker("ru_RU")


class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–µ–π –ë–î'

    def handle(self, *args, **kwargs):
        self.stdout.write(self.style.SUCCESS("üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∏"))

        self.create_departments()
        self.create_staff_users()
        self.create_customers()

        self.stdout.write(self.style.SUCCESS("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))

    def create_departments(self):
        departments_data = [
            ('backend', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏, REST API, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤.'),
            ('frontend', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–∞—è —á–∞—Å—Ç—å, SPA, SSR.'),
            ('integration', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API, 1–°, CRM, –ø–ª–∞—Ç—ë–∂–∫–∞–º–∏.'),
            ('database', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î, –º–∏–≥—Ä–∞—Ü–∏–∏, –∏–Ω–¥–µ–∫—Å—ã.'),
            ('devops', 'CI/CD, –¥–µ–ø–ª–æ–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.'),
            ('ml_ai', '–ú–æ–¥–µ–ª–∏ –ò–ò, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –æ–±—É—á–µ–Ω–∏–µ, –∏–Ω—Ñ–µ—Ä–µ–Ω—Å.'),
            ('mobile', 'iOS/Android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞.'),
            ('testing', '–ù–∞–ø–∏—Å–∞–Ω–∏–µ unit, e2e, –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.'),
            ('ux_ui', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞, –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã.'),
            ('documentation', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, Swagger, Confluence.'),
            ('architecture', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ä–µ—à–µ–Ω–∏—è, –ø–∞—Ç—Ç–µ—Ä–Ω—ã.'),
            ('security', '–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∑–∞—â–∏—Ç–∞ API, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.'),
            ('research', 'R&D –∑–∞–¥–∞—á–∏, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.'),
            ('refactoring', '–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞, —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞.'),
            ('support', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'),
        ]

        for name, description in departments_data:
            Department.objects.get_or_create(
                name=name,
                defaults={'description': description, 'bet': random.randint(1500, 3000), 'bet_local': random.randint(500, 1000)}
            )

    def create_staff_users(self):
        companies = {
            "mobile_wave": ['mobile', 'frontend', 'backend'],
            "ml_solutions": ['ml_ai', 'research', 'backend'],
            "cloud_infra": ['devops', 'integration', 'security'],
            "web_apps": ['frontend', 'ux_ui', 'testing'],
            "enterprise_soft": ['architecture', 'database', 'integration'],
            "qa_experts": ['testing', 'documentation', 'support'],
            "universal_team": ['backend', 'frontend', 'support', 'refactoring'],
        }

        departments = {d.name: d for d in Department.objects.all()}
        user_id = 1

        for company, roles in companies.items():
            for _ in range(10):  # 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é
                role = random.choice(roles)
                Staff.objects.create_user(
                    username=f"user_{user_id}",
                    password="test1234",
                    name=fake.name(),
                    category="2",  # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
                    department=departments[role],
                    account_bank=fake.iban(),
                    bank=random.choice(['t-bank', 'sber', 'alpha', 'vtb', 'other']),
                )
                user_id += 1

    def create_customers(self):
        customer_companies = [
            "mobile_wave", "ml_solutions", "cloud_infra", "web_apps",
            "enterprise_soft", "qa_experts", "universal_team", "ml_solutions"
        ]

        for i, company in enumerate(customer_companies, start=1):
            Staff.objects.create_user(
                username=f"customer_{i}",
                password="test1234",
                name=f"{fake.company()} ({company})",
                category="3",  # –∑–∞–∫–∞–∑—á–∏–∫
                bank="not_bank"
            )




# # TODO –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# from django.core.management.base import BaseCommand
# from server.models import (
#     Project, Task, SettingTask, Staff, Department,
#     ReportingTask, FeedbackCustomer, AdditionalCosts
# )
# from django.utils import timezone
# from datetime import datetime, timedelta
# import random
#
# class Command(BaseCommand):
#     help = '–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Å—è—Ç–∫–æ–≤ –∑–∞–¥–∞—á —Å –ø—Ä–∏–≤—è–∑–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
#
#     def handle(self, *args, **kwargs):
#         self.stdout.write(self.style.SUCCESS("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–¥–∞—á"))
#
#         self.generate_project_with_tasks()
#
#         self.stdout.write(self.style.SUCCESS("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
#
#     def generate_project_with_tasks(self):
#         # --- –®–∞–≥ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
#         staff_by_role = {
#             "backend": Staff.objects.filter(category="2", department__name="backend").first(),
#             "integration": Staff.objects.filter(category="2", department__name="integration").first(),
#             "devops": Staff.objects.filter(category="2", department__name="devops").first()
#         }
#
#         if None in staff_by_role.values():
#             self.stdout.write(self.style.ERROR("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö backend, integration, devops"))
#             return
#
#         customer = Staff.objects.filter(category="3").first()
#         if not customer:
#             self.stdout.write(self.style.ERROR("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫ (category=3)"))
#             return
#
#         add_costs = AdditionalCosts.objects.order_by('?').first()
#         if not add_costs:
#             self.stdout.write(self.style.ERROR("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ AdditionalCosts"))
#             return
#
#         # --- –®–∞–≥ 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ---
#         project = Project.objects.create(
#             type="2",
#             name="ERP –ê–≥—Ä–æ—Ç–µ—Ö 2025",
#             data_start=timezone.now().date(),
#             data_end=(timezone.now() + timedelta(days=60)).date(),
#             additional_costs=add_costs,
#             payment_client=450000,
#             total_cost=700000,
#             expected_costs=500000,
#             actual_costs=480000,
#             expected_profits=200000,
#             actual_profits=220000,
#             status="Development"
#         )
#
#         # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
#         project.staff.set(list(staff_by_role.values()) + [customer])
#
#         # --- –®–∞–≥ 3. –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á ---
#         tasks_by_role = {
#             "backend": [
#                 ("–†–µ–∞–ª–∏–∑–∞—Ü–∏—è REST API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "adopted_customer", 12, 10, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", "adopted_customer", 14, 16, "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", "verification", 10, 9, ""),
#                 ("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", "Started", 8, 4, ""),
#                 ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–¥–∞—á", "verification_staff", 9, 7, ""),
#                 ("–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º", "Not_started", 6, 0, ""),
#                 ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è", "adopted_customer", 10, 11, "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–í–µ–¥–µ–Ω–∏–µ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API", "adopted_customer", 6, 5, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "verification", 7, 6, "")
#             ],
#             "integration": [
#                 ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–°", "adopted_customer", 16, 15, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π Tinkoff", "adopted_customer", 14, 17, "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç CRM", "verification_staff", 12, 11, ""),
#                 ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å BI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π PowerBI", "verification", 10, 9, ""),
#                 ("–°–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel / PDF", "Started", 8, 3, ""),
#                 ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º", "verification", 12, 11, ""),
#                 ("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏", "Not_started", 6, 0, ""),
#                 ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "adopted", 9, 8, ""),
#                 ("–°–µ—Ä–≤–∏—Å email-–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", "rejected_customer", 7, 10, ""),
#                 ("–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ Telegram-–±–æ—Ç–æ–≤", "adopted_customer", 10, 10, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù –∏ –ö–ü–ü", "verification_staff", 6, 5, "")
#             ],
#             "devops": [
#                 ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD GitLab", "adopted_customer", 12, 13, "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–ü–æ–¥–Ω—è—Ç–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Docker", "adopted_customer", 14, 12, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Prometheus + Grafana", "verification", 10, 8, ""),
#                 ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx + TLS", "Started", 7, 2, ""),
#                 ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ PostgreSQL", "verification_staff", 11, 9, ""),
#                 ("–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ ELK", "Not_started", 8, 0, ""),
#                 ("–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏", "adopted_customer", 9, 7, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π"),
#                 ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞", "adopted_customer", 6, 5, "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π")
#             ]
#         }
#
#         base_date = datetime(2025, 1, 1)
#
#         # --- –®–∞–≥ 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á ---
#         for role, task_list in tasks_by_role.items():
#             staff_member = staff_by_role[role]
#             for i, (title, status, planned, fact, result) in enumerate(task_list):
#                 date_start = base_date + timedelta(days=i * 3)
#                 date_finish = date_start + timedelta(days=10)
#
#                 task = Task.objects.create(
#                     name=title,
#                     dsc=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {role}",
#                     type=role
#                 )
#
#                 reporting = ReportingTask.objects.create(
#                     data_start=date_start,
#                     report_stuff=f"–û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–µ '{title}' –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
#                     is_adopted=random.choice(['verification', 'adopted', 'rejected']),
#                     comment_director=random.choice(["", "–ù—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞", "–û–¥–æ–±—Ä–µ–Ω–æ", "–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è"])
#                 )
#
#                 feedback = FeedbackCustomer.objects.create(
#                     data_start=date_finish,
#                     report_stuff=f"–§–∏–¥–±–µ–∫ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ '{title}'",
#                     is_adopted=random.choice(['verification', 'adopted', 'rejected']),
#                     comment_director=result or random.choice(["", "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º", "–•–æ—Ä–æ—à–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"])
#                 )
#
#                 setting_task = SettingTask.objects.create(
#                     staff=staff_member,
#                     task=task,
#                     scheduled_hours=planned,
#                     scheduled_day=planned // 2,
#                     actual_hours=fact,
#                     actual_day=fact // 2,
#                     status=status,
#                     is_started=True,
#                     is_active=False
#                 )
#                 setting_task.reportings.add(reporting)
#                 setting_task.feedback_customer.add(feedback)
#
#                 project.task.add(setting_task)